// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Budget.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Feature_3_HandleMulti_TenancyFeature : Xunit.IClassFixture<Feature_3_HandleMulti_TenancyFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "[3] - Handle Multi-Tenancy.feature"
#line hidden
        
        public Feature_3_HandleMulti_TenancyFeature(Feature_3_HandleMulti_TenancyFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature - 3 - Handle Multi-Tenancy", "    As a site owner\r\n    I need to handle multi-tenancy\r\n    To optimize resource" +
                    " usage", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 8
    testRunner.Given("there are no BudgetClasses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Scenario - 3.1 - Allow same budget classes for different tenants")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature - 3 - Handle Multi-Tenancy")]
        [Xunit.TraitAttribute("Description", "Scenario - 3.1 - Allow same budget classes for different tenants")]
        public virtual void Scenario_3_1_AllowSameBudgetClassesForDifferentTenants()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scenario - 3.1 - Allow same budget classes for different tenants", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 13
    testRunner.Given("I have a new tenant \"Multi-Tenant A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table1.AddRow(new string[] {
                        "Budget Class A",
                        "1",
                        "Income"});
            table1.AddRow(new string[] {
                        "Bduget Class B",
                        "2",
                        "Expense"});
#line 15
    testRunner.And("I have the following budget class for \"Multi-Tenant A\":", ((string)(null)), table1, "And ");
#line 20
    testRunner.When("I have a new tenant \"Multi-Tenant B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table2.AddRow(new string[] {
                        "Budget Class A",
                        "1",
                        "Income"});
            table2.AddRow(new string[] {
                        "Bduget Class B",
                        "2",
                        "Expense"});
#line 22
    testRunner.Then("I can also have the following budget class for \"Multi-Tenant B\":", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Feature_3_HandleMulti_TenancyFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Feature_3_HandleMulti_TenancyFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
