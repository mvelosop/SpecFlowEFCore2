//------------------------------------------------------------------------------
//  BudgetClassRepository.cs
//
//  Implementation of: BudgetClassRepository (Class) <<entity-repository>>
//  Generated by Domion-MDA - http://www.coderepo.blog/domion
//
//  Created on     : 02-jun-2017 10:49:07
//  Original author: Miguel
//------------------------------------------------------------------------------

using Budget.Core.Model;
using Domion.Data.Base;
using Domion.Lib;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Budget.Data.Services
{
    public class BudgetClassRepository : BaseRepository<BudgetClass>, IEntityQuery<BudgetClass>
    {
        public static readonly string DuplicateByNameError = @"There's another BudgetClass with Name ""{0}"", can't duplicate! (Id={1})";

        /// <inheritdoc />
        public BudgetClassRepository(BudgetDbContext dbContext)
            : base(dbContext)
        {
        }

        public new IQueryable<BudgetClass> Query(Expression<Func<BudgetClass, bool>> where = null)
        {
            return base.Query(where);
        }

        public new virtual async Task<int> SaveChangesAsync()
        {
            return await base.SaveChangesAsync();
        }

        public new virtual async Task<List<ValidationResult>> TryDeleteAsync(BudgetClass entity)
        {
            if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException($"Missing {nameof(entity.RowVersion)} on Delete");

            return await base.TryDeleteAsync(entity);
        }

        public new virtual async Task<List<ValidationResult>> TryInsertAsync(BudgetClass entity)
        {
            if (entity.RowVersion != null && entity.RowVersion.Length > 0) throw new InvalidOperationException($"Existing {nameof(entity.RowVersion)} on Insert");

            CommonSaveOperations(entity);

            return await base.TryInsertAsync(entity);
        }

        public new virtual async Task<List<ValidationResult>> TryUpdateAsync(BudgetClass entity)
        {
            if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException($"Missing {nameof(entity.RowVersion)} on Update");

            CommonSaveOperations(entity);

            return await base.TryUpdateAsync(entity);
        }

        public virtual async Task<List<ValidationResult>> TryUpsertAsync(BudgetClass entity)
        {
            return entity.Id == 0 ? await TryInsertAsync(entity) : await TryUpdateAsync(entity);
        }

        /// <summary>
        ///     Performs operations that have to be executed both on inserts and updates.
        /// </summary>
        internal virtual void CommonSaveOperations(BudgetClass entity)
        {
            TrimStrings(entity);
        }

        protected override async Task<List<ValidationResult>> ValidateDeleteAsync(BudgetClass entity)
        {
            return Errors.NoError;
        }

        /// <inheritdoc />
        protected override async Task<List<ValidationResult>> ValidateSaveAsync(BudgetClass entity)
        {
            // 5-3. Validate name duplication
            //-------------------------------

            BudgetClass duplicateByName = await this.FindDuplicateByNameAsync(entity);

            if (duplicateByName != null)
            {
                return Errors.ErrorList(DuplicateByNameError, new object[] { duplicateByName.Name, duplicateByName.Id }, new[] { "Name" });
            }

            return Errors.NoError;
        }

        private void TrimStrings(BudgetClass entity)
        {
            entity.Name = entity.Name?.Trim();
        }
    }
}
